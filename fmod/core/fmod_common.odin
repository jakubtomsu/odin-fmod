package fmod_core

/* ======================================================================================== */
/* FMOD Core API - Common C/C++ header file.                                                */
/* Copyright (c), Firelight Technologies Pty, Ltd. 2004-2023.                               */
/*                                                                                          */
/* This header is included by fmod.hpp (C++ interface) and fmod.h (C interface)             */
/*                                                                                          */
/* For more detail visit:                                                                   */
/* https://fmod.com/docs/2.02/api/core-api-common.html                                      */
/* ======================================================================================== */



///////////////////////////////////////////////////////////////////////////////////////////////////////
// FMOD constants
//

VERSION: u32 : 0x00020215 /* 0xaaaabbcc -> aaaa = product version, bb = major version, cc = minor version.*/



///////////////////////////////////////////////////////////////////////////////////////////////////////
// FMOD core types
//

SYSTEM :: struct {}
SOUND :: struct {}
CHANNELCONTROL :: struct {}
CHANNEL :: struct {}
CHANNELGROUP :: struct {}
SOUNDGROUP :: struct {}
REVERB3D :: struct {}
DSP :: struct {}
DSPCONNECTION :: struct {}
POLYGON :: struct {}
GEOMETRY :: struct {}
SYNCPOINT :: struct {}



///////////////////////////////////////////////////////////////////////////////////////////////////////
// FMOD constants
//

DEBUG_FLAGS :: distinct u32
DEBUG_LEVEL_NONE :: 0x00000000
DEBUG_LEVEL_ERROR :: 0x00000001
DEBUG_LEVEL_WARNING :: 0x00000002
DEBUG_LEVEL_LOG :: 0x00000004
DEBUG_TYPE_MEMORY :: 0x00000100
DEBUG_TYPE_FILE :: 0x00000200
DEBUG_TYPE_CODEC :: 0x00000400
DEBUG_TYPE_TRACE :: 0x00000800
DEBUG_DISPLAY_TIMESTAMPS :: 0x00010000
DEBUG_DISPLAY_LINENUMBERS :: 0x00020000
DEBUG_DISPLAY_THREAD :: 0x00040000

MEMORY_TYPE :: distinct u32
MEMORY_NORMAL :: 0x00000000
MEMORY_STREAM_FILE :: 0x00000001
MEMORY_STREAM_DECODE :: 0x00000002
MEMORY_SAMPLEDATA :: 0x00000004
MEMORY_DSP_BUFFER :: 0x00000008
MEMORY_PLUGIN :: 0x00000010
MEMORY_PERSISTENT :: 0x00200000
MEMORY_ALL :: 0xFFFFFFFF

INITFLAGS :: distinct u32
INIT_NORMAL :: 0x00000000
INIT_STREAM_FROM_UPDATE :: 0x00000001
INIT_MIX_FROM_UPDATE :: 0x00000002
INIT_3D_RIGHTHANDED :: 0x00000004
INIT_CLIP_OUTPUT :: 0x00000008
INIT_CHANNEL_LOWPASS :: 0x00000100
INIT_CHANNEL_DISTANCEFILTER :: 0x00000200
INIT_PROFILE_ENABLE :: 0x00010000
INIT_VOL0_BECOMES_VIRTUAL :: 0x00020000
INIT_GEOMETRY_USECLOSEST :: 0x00040000
INIT_PREFER_DOLBY_DOWNMIX :: 0x00080000
INIT_THREAD_UNSAFE :: 0x00100000
INIT_PROFILE_METER_ALL :: 0x00200000
INIT_MEMORY_TRACKING :: 0x00400000

DRIVER_STATE :: distinct u32
DRIVER_STATE_CONNECTED :: 0x00000001
DRIVER_STATE_DEFAULT :: 0x00000002

TIMEUNIT :: distinct u32
TIMEUNIT_MS :: 0x00000001
TIMEUNIT_PCM :: 0x00000002
TIMEUNIT_PCMBYTES :: 0x00000004
TIMEUNIT_RAWBYTES :: 0x00000008
TIMEUNIT_PCMFRACTION :: 0x00000010
TIMEUNIT_MODORDER :: 0x00000100
TIMEUNIT_MODROW :: 0x00000200
TIMEUNIT_MODPATTERN :: 0x00000400

SYSTEM_CALLBACK_TYPE :: distinct u32
SYSTEM_CALLBACK_DEVICELISTCHANGED :: 0x00000001
SYSTEM_CALLBACK_DEVICELOST :: 0x00000002
SYSTEM_CALLBACK_MEMORYALLOCATIONFAILED :: 0x00000004
SYSTEM_CALLBACK_THREADCREATED :: 0x00000008
SYSTEM_CALLBACK_BADDSPCONNECTION :: 0x00000010
SYSTEM_CALLBACK_PREMIX :: 0x00000020
SYSTEM_CALLBACK_POSTMIX :: 0x00000040
SYSTEM_CALLBACK_ERROR :: 0x00000080
SYSTEM_CALLBACK_MIDMIX :: 0x00000100
SYSTEM_CALLBACK_THREADDESTROYED :: 0x00000200
SYSTEM_CALLBACK_PREUPDATE :: 0x00000400
SYSTEM_CALLBACK_POSTUPDATE :: 0x00000800
SYSTEM_CALLBACK_RECORDLISTCHANGED :: 0x00001000
SYSTEM_CALLBACK_BUFFEREDNOMIX :: 0x00002000
SYSTEM_CALLBACK_DEVICEREINITIALIZE :: 0x00004000
SYSTEM_CALLBACK_OUTPUTUNDERRUN :: 0x00008000
SYSTEM_CALLBACK_RECORDPOSITIONCHANGED :: 0x00010000
SYSTEM_CALLBACK_ALL :: 0xFFFFFFFF

MODE :: distinct u32
MODE_DEFAULT :: 0x00000000
MODE_LOOP_OFF :: 0x00000001
MODE_LOOP_NORMAL :: 0x00000002
MODE_LOOP_BIDI :: 0x00000004
MODE_2D :: 0x00000008
MODE_3D :: 0x00000010
MODE_CREATESTREAM :: 0x00000080
MODE_CREATESAMPLE :: 0x00000100
MODE_CREATECOMPRESSEDSAMPLE :: 0x00000200
MODE_OPENUSER :: 0x00000400
MODE_OPENMEMORY :: 0x00000800
MODE_OPENMEMORY_POINT :: 0x10000000
MODE_OPENRAW :: 0x00001000
MODE_OPENONLY :: 0x00002000
MODE_ACCURATETIME :: 0x00004000
MODE_MPEGSEARCH :: 0x00008000
MODE_NONBLOCKING :: 0x00010000
MODE_UNIQUE :: 0x00020000
MODE_3D_HEADRELATIVE :: 0x00040000
MODE_3D_WORLDRELATIVE :: 0x00080000
MODE_3D_INVERSEROLLOFF :: 0x00100000
MODE_3D_LINEARROLLOFF :: 0x00200000
MODE_3D_LINEARSQUAREROLLOFF :: 0x00400000
MODE_3D_INVERSETAPEREDROLLOFF :: 0x00800000
MODE_3D_CUSTOMROLLOFF :: 0x04000000
MODE_3D_IGNOREGEOMETRY :: 0x40000000
MODE_IGNORETAGS :: 0x02000000
MODE_LOWMEM :: 0x08000000
MODE_VIRTUAL_PLAYFROMSTART :: 0x80000000

CHANNELMASK :: distinct u32
CHANNELMASK_FRONT_LEFT :: 0x00000001
CHANNELMASK_FRONT_RIGHT :: 0x00000002
CHANNELMASK_FRONT_CENTER :: 0x00000004
CHANNELMASK_LOW_FREQUENCY :: 0x00000008
CHANNELMASK_SURROUND_LEFT :: 0x00000010
CHANNELMASK_SURROUND_RIGHT :: 0x00000020
CHANNELMASK_BACK_LEFT :: 0x00000040
CHANNELMASK_BACK_RIGHT :: 0x00000080
CHANNELMASK_BACK_CENTER :: 0x00000100
CHANNELMASK_MONO :: (CHANNELMASK_FRONT_LEFT)
CHANNELMASK_STEREO :: (CHANNELMASK_FRONT_LEFT | CHANNELMASK_FRONT_RIGHT)
CHANNELMASK_LRC :: (CHANNELMASK_FRONT_LEFT | CHANNELMASK_FRONT_RIGHT | CHANNELMASK_FRONT_CENTER)
CHANNELMASK_QUAD ::
    (CHANNELMASK_FRONT_LEFT |
        CHANNELMASK_FRONT_RIGHT |
        CHANNELMASK_SURROUND_LEFT |
        CHANNELMASK_SURROUND_RIGHT)
CHANNELMASK_SURROUND ::
    (CHANNELMASK_FRONT_LEFT |
        CHANNELMASK_FRONT_RIGHT |
        CHANNELMASK_FRONT_CENTER |
        CHANNELMASK_SURROUND_LEFT |
        CHANNELMASK_SURROUND_RIGHT)
CHANNELMASK_5POINT1 ::
    (CHANNELMASK_FRONT_LEFT |
        CHANNELMASK_FRONT_RIGHT |
        CHANNELMASK_FRONT_CENTER |
        CHANNELMASK_LOW_FREQUENCY |
        CHANNELMASK_SURROUND_LEFT |
        CHANNELMASK_SURROUND_RIGHT)
CHANNELMASK_5POINT1_REARS ::
    (CHANNELMASK_FRONT_LEFT |
        CHANNELMASK_FRONT_RIGHT |
        CHANNELMASK_FRONT_CENTER |
        CHANNELMASK_LOW_FREQUENCY |
        CHANNELMASK_BACK_LEFT |
        CHANNELMASK_BACK_RIGHT)
CHANNELMASK_7POINT0 ::
    (CHANNELMASK_FRONT_LEFT |
        CHANNELMASK_FRONT_RIGHT |
        CHANNELMASK_FRONT_CENTER |
        CHANNELMASK_SURROUND_LEFT |
        CHANNELMASK_SURROUND_RIGHT |
        CHANNELMASK_BACK_LEFT |
        CHANNELMASK_BACK_RIGHT)
CHANNELMASK_7POINT1 ::
    (CHANNELMASK_FRONT_LEFT |
        CHANNELMASK_FRONT_RIGHT |
        CHANNELMASK_FRONT_CENTER |
        CHANNELMASK_LOW_FREQUENCY |
        CHANNELMASK_SURROUND_LEFT |
        CHANNELMASK_SURROUND_RIGHT |
        CHANNELMASK_BACK_LEFT |
        CHANNELMASK_BACK_RIGHT)

PORT_INDEX :: distinct uint
PORT_INDEX_NONE :: 0xFFFFFFFFFFFFFFFF
PORT_INDEX_FLAG_VR_CONTROLLER :: 0x1000000000000000

THREAD_PRIORITY :: distinct i32
/* Platform specific priority range */
THREAD_PRIORITY_PLATFORM_MIN :: (-32 * 1024)
THREAD_PRIORITY_PLATFORM_MAX :: (32 * 1024)
/* Platform agnostic priorities, maps internally to platform specific value */
THREAD_PRIORITY_DEFAULT :: (THREAD_PRIORITY_PLATFORM_MIN - 1)
THREAD_PRIORITY_LOW :: (THREAD_PRIORITY_PLATFORM_MIN - 2)
THREAD_PRIORITY_MEDIUM :: (THREAD_PRIORITY_PLATFORM_MIN - 3)
THREAD_PRIORITY_HIGH :: (THREAD_PRIORITY_PLATFORM_MIN - 4)
THREAD_PRIORITY_VERY_HIGH :: (THREAD_PRIORITY_PLATFORM_MIN - 5)
THREAD_PRIORITY_EXTREME :: (THREAD_PRIORITY_PLATFORM_MIN - 6)
THREAD_PRIORITY_CRITICAL :: (THREAD_PRIORITY_PLATFORM_MIN - 7)
/* Thread defaults */
THREAD_PRIORITY_MIXER :: THREAD_PRIORITY_EXTREME
THREAD_PRIORITY_FEEDER :: THREAD_PRIORITY_CRITICAL
THREAD_PRIORITY_STREAM :: THREAD_PRIORITY_VERY_HIGH
THREAD_PRIORITY_FILE :: THREAD_PRIORITY_HIGH
THREAD_PRIORITY_NONBLOCKING :: THREAD_PRIORITY_HIGH
THREAD_PRIORITY_RECORD :: THREAD_PRIORITY_HIGH
THREAD_PRIORITY_GEOMETRY :: THREAD_PRIORITY_LOW
THREAD_PRIORITY_PROFILER :: THREAD_PRIORITY_MEDIUM
THREAD_PRIORITY_STUDIO_UPDATE :: THREAD_PRIORITY_MEDIUM
THREAD_PRIORITY_STUDIO_LOAD_BANK :: THREAD_PRIORITY_MEDIUM
THREAD_PRIORITY_STUDIO_LOAD_SAMPLE :: THREAD_PRIORITY_MEDIUM
THREAD_PRIORITY_CONVOLUTION1 :: THREAD_PRIORITY_VERY_HIGH
THREAD_PRIORITY_CONVOLUTION2 :: THREAD_PRIORITY_VERY_HIGH

THREAD_STACK_SIZE :: distinct u32
THREAD_STACK_SIZE_DEFAULT :: 0
THREAD_STACK_SIZE_MIXER :: (80 * 1024)
THREAD_STACK_SIZE_FEEDER :: (16 * 1024)
THREAD_STACK_SIZE_STREAM :: (96 * 1024)
THREAD_STACK_SIZE_FILE :: (64 * 1024)
THREAD_STACK_SIZE_NONBLOCKING :: (112 * 1024)
THREAD_STACK_SIZE_RECORD :: (16 * 1024)
THREAD_STACK_SIZE_GEOMETRY :: (48 * 1024)
THREAD_STACK_SIZE_PROFILER :: (128 * 1024)
THREAD_STACK_SIZE_STUDIO_UPDATE :: (96 * 1024)
THREAD_STACK_SIZE_STUDIO_LOAD_BANK :: (96 * 1024)
THREAD_STACK_SIZE_STUDIO_LOAD_SAMPLE :: (96 * 1024)
THREAD_STACK_SIZE_CONVOLUTION1 :: (16 * 1024)
THREAD_STACK_SIZE_CONVOLUTION2 :: (16 * 1024)

THREAD_AFFINITY :: distinct int
/* Platform agnostic thread groupings */
THREAD_AFFINITY_GROUP_DEFAULT :: 0x4000000000000000
THREAD_AFFINITY_GROUP_A :: 0x4000000000000001
THREAD_AFFINITY_GROUP_B :: 0x4000000000000002
THREAD_AFFINITY_GROUP_C :: 0x4000000000000003
/* Thread defaults */
THREAD_AFFINITY_MIXER :: THREAD_AFFINITY_GROUP_A
THREAD_AFFINITY_FEEDER :: THREAD_AFFINITY_GROUP_C
THREAD_AFFINITY_STREAM :: THREAD_AFFINITY_GROUP_C
THREAD_AFFINITY_FILE :: THREAD_AFFINITY_GROUP_C
THREAD_AFFINITY_NONBLOCKING :: THREAD_AFFINITY_GROUP_C
THREAD_AFFINITY_RECORD :: THREAD_AFFINITY_GROUP_C
THREAD_AFFINITY_GEOMETRY :: THREAD_AFFINITY_GROUP_C
THREAD_AFFINITY_PROFILER :: THREAD_AFFINITY_GROUP_C
THREAD_AFFINITY_STUDIO_UPDATE :: THREAD_AFFINITY_GROUP_B
THREAD_AFFINITY_STUDIO_LOAD_BANK :: THREAD_AFFINITY_GROUP_C
THREAD_AFFINITY_STUDIO_LOAD_SAMPLE :: THREAD_AFFINITY_GROUP_C
THREAD_AFFINITY_CONVOLUTION1 :: THREAD_AFFINITY_GROUP_C
THREAD_AFFINITY_CONVOLUTION2 :: THREAD_AFFINITY_GROUP_C
/* Core mask, valid up to 1 << 62 */
THREAD_AFFINITY_CORE_ALL :: 0
THREAD_AFFINITY_CORE_0 :: (1 << 0)
THREAD_AFFINITY_CORE_1 :: (1 << 1)
THREAD_AFFINITY_CORE_2 :: (1 << 2)
THREAD_AFFINITY_CORE_3 :: (1 << 3)
THREAD_AFFINITY_CORE_4 :: (1 << 4)
THREAD_AFFINITY_CORE_5 :: (1 << 5)
THREAD_AFFINITY_CORE_6 :: (1 << 6)
THREAD_AFFINITY_CORE_7 :: (1 << 7)
THREAD_AFFINITY_CORE_8 :: (1 << 8)
THREAD_AFFINITY_CORE_9 :: (1 << 9)
THREAD_AFFINITY_CORE_10 :: (1 << 10)
THREAD_AFFINITY_CORE_11 :: (1 << 11)
THREAD_AFFINITY_CORE_12 :: (1 << 12)
THREAD_AFFINITY_CORE_13 :: (1 << 13)
THREAD_AFFINITY_CORE_14 :: (1 << 14)
THREAD_AFFINITY_CORE_15 :: (1 << 15)

/* Preset for REVERB_PROPERTIES */
PRESET_OFF :: REVERB_PROPERTIES{1000, 7, 11, 5000, 100, 100, 100, 250, 0, 20, 96, -80.0}
PRESET_GENERIC :: REVERB_PROPERTIES{1500, 7, 11, 5000, 83, 100, 100, 250, 0, 14500, 96, -8.0}
PRESET_PADDEDCELL :: REVERB_PROPERTIES{170, 1, 2, 5000, 10, 100, 100, 250, 0, 160, 84, -7.8}
PRESET_ROOM :: REVERB_PROPERTIES{400, 2, 3, 5000, 83, 100, 100, 250, 0, 6050, 88, -9.4}
PRESET_BATHROOM :: REVERB_PROPERTIES{1500, 7, 11, 5000, 54, 100, 60, 250, 0, 2900, 83, 0.5}
PRESET_LIVINGROOM :: REVERB_PROPERTIES{500, 3, 4, 5000, 10, 100, 100, 250, 0, 160, 58, -19.0}
PRESET_STONEROOM :: REVERB_PROPERTIES{2300, 12, 17, 5000, 64, 100, 100, 250, 0, 7800, 71, -8.5}
PRESET_AUDITORIUM :: REVERB_PROPERTIES{4300, 20, 30, 5000, 59, 100, 100, 250, 0, 5850, 64, -11.7}
PRESET_CONCERTHALL :: REVERB_PROPERTIES{3900, 20, 29, 5000, 70, 100, 100, 250, 0, 5650, 80, -9.8}
PRESET_CAVE :: REVERB_PROPERTIES{2900, 15, 22, 5000, 100, 100, 100, 250, 0, 20000, 59, -11.3}
PRESET_ARENA :: REVERB_PROPERTIES{7200, 20, 30, 5000, 33, 100, 100, 250, 0, 4500, 80, -9.6}
PRESET_HANGAR :: REVERB_PROPERTIES{10000, 20, 30, 5000, 23, 100, 100, 250, 0, 3400, 72, -7.4}
PRESET_CARPETTEDHALLWAY :: REVERB_PROPERTIES{300, 2, 30, 5000, 10, 100, 100, 250, 0, 500, 56, -24.0}
PRESET_HALLWAY :: REVERB_PROPERTIES{1500, 7, 11, 5000, 59, 100, 100, 250, 0, 7800, 87, -5.5}
PRESET_STONECORRIDOR :: REVERB_PROPERTIES{270, 13, 20, 5000, 79, 100, 100, 250, 0, 9000, 86, -6.0}
PRESET_ALLEY :: REVERB_PROPERTIES{1500, 7, 11, 5000, 86, 100, 100, 250, 0, 8300, 80, -9.8}
PRESET_FOREST :: REVERB_PROPERTIES{1500, 162, 88, 5000, 54, 79, 100, 250, 0, 760, 94, -12.3}
PRESET_CITY :: REVERB_PROPERTIES{1500, 7, 11, 5000, 67, 50, 100, 250, 0, 4050, 66, -26.0}
PRESET_MOUNTAINS :: REVERB_PROPERTIES{1500, 300, 100, 5000, 21, 27, 100, 250, 0, 1220, 82, -24.0}
PRESET_QUARRY :: REVERB_PROPERTIES{1500, 61, 25, 5000, 83, 100, 100, 250, 0, 3400, 100, -5.0}
PRESET_PLAIN :: REVERB_PROPERTIES{1500, 179, 100, 5000, 50, 21, 100, 250, 0, 1670, 65, -28.0}
PRESET_PARKINGLOT :: REVERB_PROPERTIES{1700, 8, 12, 5000, 100, 100, 100, 250, 0, 20000, 56, -19.5}
PRESET_SEWERPIPE :: REVERB_PROPERTIES{2800, 14, 21, 5000, 14, 80, 60, 250, 0, 3400, 66, 1.2}
PRESET_UNDERWATER :: REVERB_PROPERTIES{1500, 7, 11, 5000, 10, 100, 100, 250, 0, 500, 92, 7.0}

MAX_CHANNEL_WIDTH :: 32
MAX_SYSTEMS :: 8
MAX_LISTENERS :: 8
REVERB_MAXINSTANCES :: 4

THREAD_TYPE :: enum i32 {
    THREAD_TYPE_MIXER,
    THREAD_TYPE_FEEDER,
    THREAD_TYPE_STREAM,
    THREAD_TYPE_FILE,
    THREAD_TYPE_NONBLOCKING,
    THREAD_TYPE_RECORD,
    THREAD_TYPE_GEOMETRY,
    THREAD_TYPE_PROFILER,
    THREAD_TYPE_STUDIO_UPDATE,
    THREAD_TYPE_STUDIO_LOAD_BANK,
    THREAD_TYPE_STUDIO_LOAD_SAMPLE,
    THREAD_TYPE_CONVOLUTION1,
    THREAD_TYPE_CONVOLUTION2,
    THREAD_TYPE_MAX,
}

RESULT :: enum i32 {
    OK = 0,
    ERR_BADCOMMAND,
    ERR_CHANNEL_ALLOC,
    ERR_CHANNEL_STOLEN,
    ERR_DMA,
    ERR_DSP_CONNECTION,
    ERR_DSP_DONTPROCESS,
    ERR_DSP_FORMAT,
    ERR_DSP_INUSE,
    ERR_DSP_NOTFOUND,
    ERR_DSP_RESERVED,
    ERR_DSP_SILENCE,
    ERR_DSP_TYPE,
    ERR_FILE_BAD,
    ERR_FILE_COULDNOTSEEK,
    ERR_FILE_DISKEJECTED,
    ERR_FILE_EOF,
    ERR_FILE_ENDOFDATA,
    ERR_FILE_NOTFOUND,
    ERR_FORMAT,
    ERR_HEADER_MISMATCH,
    ERR_HTTP,
    ERR_HTTP_ACCESS,
    ERR_HTTP_PROXY_AUTH,
    ERR_HTTP_SERVER_ERROR,
    ERR_HTTP_TIMEOUT,
    ERR_INITIALIZATION,
    ERR_INITIALIZED,
    ERR_INTERNAL,
    ERR_INVALID_FLOAT,
    ERR_INVALID_HANDLE,
    ERR_INVALID_PARAM,
    ERR_INVALID_POSITION,
    ERR_INVALID_SPEAKER,
    ERR_INVALID_SYNCPOINT,
    ERR_INVALID_THREAD,
    ERR_INVALID_VECTOR,
    ERR_MAXAUDIBLE,
    ERR_MEMORY,
    ERR_MEMORY_CANTPOINT,
    ERR_NEEDS3D,
    ERR_NEEDSHARDWARE,
    ERR_NET_CONNECT,
    ERR_NET_SOCKET_ERROR,
    ERR_NET_URL,
    ERR_NET_WOULD_BLOCK,
    ERR_NOTREADY,
    ERR_OUTPUT_ALLOCATED,
    ERR_OUTPUT_CREATEBUFFER,
    ERR_OUTPUT_DRIVERCALL,
    ERR_OUTPUT_FORMAT,
    ERR_OUTPUT_INIT,
    ERR_OUTPUT_NODRIVERS,
    ERR_PLUGIN,
    ERR_PLUGIN_MISSING,
    ERR_PLUGIN_RESOURCE,
    ERR_PLUGIN_VERSION,
    ERR_RECORD,
    ERR_REVERB_CHANNELGROUP,
    ERR_REVERB_INSTANCE,
    ERR_SUBSOUNDS,
    ERR_SUBSOUND_ALLOCATED,
    ERR_SUBSOUND_CANTMOVE,
    ERR_TAGNOTFOUND,
    ERR_TOOMANYCHANNELS,
    ERR_TRUNCATED,
    ERR_UNIMPLEMENTED,
    ERR_UNINITIALIZED,
    ERR_UNSUPPORTED,
    ERR_VERSION,
    ERR_EVENT_ALREADY_LOADED,
    ERR_EVENT_LIVEUPDATE_BUSY,
    ERR_EVENT_LIVEUPDATE_MISMATCH,
    ERR_EVENT_LIVEUPDATE_TIMEOUT,
    ERR_EVENT_NOTFOUND,
    ERR_STUDIO_UNINITIALIZED,
    ERR_STUDIO_NOT_LOADED,
    ERR_INVALID_STRING,
    ERR_ALREADY_LOCKED,
    ERR_NOT_LOCKED,
    ERR_RECORD_DISCONNECTED,
    ERR_TOOMANYSAMPLES,
}

CHANNELCONTROL_TYPE :: enum i32 {
    CHANNELCONTROL_CHANNEL,
    CHANNELCONTROL_CHANNELGROUP,
    CHANNELCONTROL_MAX,
}

OUTPUTTYPE :: enum i32 {
    OUTPUTTYPE_AUTODETECT,
    OUTPUTTYPE_UNKNOWN,
    OUTPUTTYPE_NOSOUND,
    OUTPUTTYPE_WAVWRITER,
    OUTPUTTYPE_NOSOUND_NRT,
    OUTPUTTYPE_WAVWRITER_NRT,
    OUTPUTTYPE_WASAPI,
    OUTPUTTYPE_ASIO,
    OUTPUTTYPE_PULSEAUDIO,
    OUTPUTTYPE_ALSA,
    OUTPUTTYPE_COREAUDIO,
    OUTPUTTYPE_AUDIOTRACK,
    OUTPUTTYPE_OPENSL,
    OUTPUTTYPE_AUDIOOUT,
    OUTPUTTYPE_AUDIO3D,
    OUTPUTTYPE_WEBAUDIO,
    OUTPUTTYPE_NNAUDIO,
    OUTPUTTYPE_WINSONIC,
    OUTPUTTYPE_AAUDIO,
    OUTPUTTYPE_AUDIOWORKLET,
    OUTPUTTYPE_PHASE,
    OUTPUTTYPE_MAX,
}

DEBUG_MODE :: enum i32 {
    DEBUG_MODE_TTY,
    DEBUG_MODE_FILE,
    DEBUG_MODE_CALLBACK,
}

SPEAKERMODE :: enum i32 {
    SPEAKERMODE_DEFAULT,
    SPEAKERMODE_RAW,
    SPEAKERMODE_MONO,
    SPEAKERMODE_STEREO,
    SPEAKERMODE_QUAD,
    SPEAKERMODE_SURROUND,
    SPEAKERMODE_5POINT1,
    SPEAKERMODE_7POINT1,
    SPEAKERMODE_7POINT1POINT4,
    SPEAKERMODE_MAX,
}

SPEAKER :: enum i32 {
    SPEAKER_NONE = -1,
    SPEAKER_FRONT_LEFT = 0,
    SPEAKER_FRONT_RIGHT,
    SPEAKER_FRONT_CENTER,
    SPEAKER_LOW_FREQUENCY,
    SPEAKER_SURROUND_LEFT,
    SPEAKER_SURROUND_RIGHT,
    SPEAKER_BACK_LEFT,
    SPEAKER_BACK_RIGHT,
    SPEAKER_TOP_FRONT_LEFT,
    SPEAKER_TOP_FRONT_RIGHT,
    SPEAKER_TOP_BACK_LEFT,
    SPEAKER_TOP_BACK_RIGHT,
    SPEAKER_MAX,
}

CHANNELORDER :: enum i32 {
    CHANNELORDER_DEFAULT,
    CHANNELORDER_WAVEFORMAT,
    CHANNELORDER_PROTOOLS,
    CHANNELORDER_ALLMONO,
    CHANNELORDER_ALLSTEREO,
    CHANNELORDER_ALSA,
    CHANNELORDER_MAX,
}

PLUGINTYPE :: enum i32 {
    PLUGINTYPE_OUTPUT,
    PLUGINTYPE_CODEC,
    PLUGINTYPE_DSP,
    PLUGINTYPE_MAX,
}

SOUND_TYPE :: enum i32 {
    SOUND_TYPE_UNKNOWN,
    SOUND_TYPE_AIFF,
    SOUND_TYPE_ASF,
    SOUND_TYPE_DLS,
    SOUND_TYPE_FLAC,
    SOUND_TYPE_FSB,
    SOUND_TYPE_IT,
    SOUND_TYPE_MIDI,
    SOUND_TYPE_MOD,
    SOUND_TYPE_MPEG,
    SOUND_TYPE_OGGVORBIS,
    SOUND_TYPE_PLAYLIST,
    SOUND_TYPE_RAW,
    SOUND_TYPE_S3M,
    SOUND_TYPE_USER,
    SOUND_TYPE_WAV,
    SOUND_TYPE_XM,
    SOUND_TYPE_XMA,
    SOUND_TYPE_AUDIOQUEUE,
    SOUND_TYPE_AT9,
    SOUND_TYPE_VORBIS,
    SOUND_TYPE_MEDIA_FOUNDATION,
    SOUND_TYPE_MEDIACODEC,
    SOUND_TYPE_FADPCM,
    SOUND_TYPE_OPUS,
    SOUND_TYPE_MAX,
}

SOUND_FORMAT :: enum i32 {
    SOUND_FORMAT_NONE,
    SOUND_FORMAT_PCM8,
    SOUND_FORMAT_PCM16,
    SOUND_FORMAT_PCM24,
    SOUND_FORMAT_PCM32,
    SOUND_FORMAT_PCMFLOAT,
    SOUND_FORMAT_BITSTREAM,
    SOUND_FORMAT_MAX,
}

OPENSTATE :: enum i32 {
    OPENSTATE_READY,
    OPENSTATE_LOADING,
    OPENSTATE_ERROR,
    OPENSTATE_CONNECTING,
    OPENSTATE_BUFFERING,
    OPENSTATE_SEEKING,
    OPENSTATE_PLAYING,
    OPENSTATE_SETPOSITION,
    OPENSTATE_MAX,
}

SOUNDGROUP_BEHAVIOR :: enum i32 {
    SOUNDGROUP_BEHAVIOR_FAIL,
    SOUNDGROUP_BEHAVIOR_MUTE,
    SOUNDGROUP_BEHAVIOR_STEALLOWEST,
    SOUNDGROUP_BEHAVIOR_MAX,
}

CHANNELCONTROL_CALLBACK_TYPE :: enum i32 {
    CHANNELCONTROL_CALLBACK_END,
    CHANNELCONTROL_CALLBACK_VIRTUALVOICE,
    CHANNELCONTROL_CALLBACK_SYNCPOINT,
    CHANNELCONTROL_CALLBACK_OCCLUSION,
    CHANNELCONTROL_CALLBACK_MAX,
}

CHANNELCONTROL_DSP_INDEX :: enum i32 {
    CHANNELCONTROL_DSP_HEAD  = -1,
    CHANNELCONTROL_DSP_FADER = -2,
    CHANNELCONTROL_DSP_TAIL  = -3,
}

ERRORCALLBACK_INSTANCETYPE :: enum i32 {
    ERRORCALLBACK_INSTANCETYPE_NONE,
    ERRORCALLBACK_INSTANCETYPE_SYSTEM,
    ERRORCALLBACK_INSTANCETYPE_CHANNEL,
    ERRORCALLBACK_INSTANCETYPE_CHANNELGROUP,
    ERRORCALLBACK_INSTANCETYPE_CHANNELCONTROL,
    ERRORCALLBACK_INSTANCETYPE_SOUND,
    ERRORCALLBACK_INSTANCETYPE_SOUNDGROUP,
    ERRORCALLBACK_INSTANCETYPE_DSP,
    ERRORCALLBACK_INSTANCETYPE_DSPCONNECTION,
    ERRORCALLBACK_INSTANCETYPE_GEOMETRY,
    ERRORCALLBACK_INSTANCETYPE_REVERB3D,
    ERRORCALLBACK_INSTANCETYPE_STUDIO_SYSTEM,
    ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTDESCRIPTION,
    ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTINSTANCE,
    ERRORCALLBACK_INSTANCETYPE_STUDIO_PARAMETERINSTANCE,
    ERRORCALLBACK_INSTANCETYPE_STUDIO_BUS,
    ERRORCALLBACK_INSTANCETYPE_STUDIO_VCA,
    ERRORCALLBACK_INSTANCETYPE_STUDIO_BANK,
    ERRORCALLBACK_INSTANCETYPE_STUDIO_COMMANDREPLAY,
}

DSP_RESAMPLER :: enum i32 {
    DSP_RESAMPLER_DEFAULT,
    DSP_RESAMPLER_NOINTERP,
    DSP_RESAMPLER_LINEAR,
    DSP_RESAMPLER_CUBIC,
    DSP_RESAMPLER_SPLINE,
    DSP_RESAMPLER_MAX,
}

DSP_CALLBACK_TYPE :: enum i32 {
    DSP_CALLBACK_DATAPARAMETERRELEASE,
    DSP_CALLBACK_MAX,
}

DSPCONNECTION_TYPE :: enum i32 {
    DSPCONNECTION_TYPE_STANDARD,
    DSPCONNECTION_TYPE_SIDECHAIN,
    DSPCONNECTION_TYPE_SEND,
    DSPCONNECTION_TYPE_SEND_SIDECHAIN,
    DSPCONNECTION_TYPE_MAX,
}

TAGTYPE :: enum i32 {
    TAGTYPE_UNKNOWN,
    TAGTYPE_ID3V1,
    TAGTYPE_ID3V2,
    TAGTYPE_VORBISCOMMENT,
    TAGTYPE_SHOUTCAST,
    TAGTYPE_ICECAST,
    TAGTYPE_ASF,
    TAGTYPE_MIDI,
    TAGTYPE_PLAYLIST,
    TAGTYPE_FMOD,
    TAGTYPE_USER,
    TAGTYPE_MAX,
}

TAGDATATYPE :: enum i32 {
    TAGDATATYPE_BINARY,
    TAGDATATYPE_INT,
    TAGDATATYPE_FLOAT,
    TAGDATATYPE_STRING,
    TAGDATATYPE_STRING_UTF16,
    TAGDATATYPE_STRING_UTF16BE,
    TAGDATATYPE_STRING_UTF8,
    TAGDATATYPE_MAX,
}

PORT_TYPE :: enum i32 {
    PORT_TYPE_MUSIC,
    PORT_TYPE_COPYRIGHT_MUSIC,
    PORT_TYPE_VOICE,
    PORT_TYPE_CONTROLLER,
    PORT_TYPE_PERSONAL,
    PORT_TYPE_VIBRATION,
    PORT_TYPE_AUX,
    PORT_TYPE_MAX,
}



///////////////////////////////////////////////////////////////////////////////////////////////////////
// FMOD callbacks
//

DEBUG_CALLBACK :: #type proc "cdecl" (
    flags: DEBUG_FLAGS,
    file: cstring,
    line: i32,
    func: cstring,
    message: cstring,
) -> RESULT

SYSTEM_CALLBACK :: #type proc "cdecl" (
    system: ^SYSTEM,
    type: SYSTEM_CALLBACK_TYPE,
    commanddata1: rawptr,
    commanddata2: rawptr,
    userdata: rawptr,
) -> RESULT

CHANNELCONTROL_CALLBACK :: proc "cdecl" (
    channelcontrol: ^CHANNELCONTROL,
    controltype: CHANNELCONTROL_TYPE,
    callbacktype: CHANNELCONTROL_CALLBACK_TYPE,
    commanddata1: rawptr,
    commanddata2: rawptr,
) -> RESULT

DSP_CALLBACK :: #type proc "cdecl" (dsp: ^DSP, type: DSP_CALLBACK_TYPE, data: rawptr) -> RESULT
SOUND_NONBLOCK_CALLBACK :: #type proc "cdecl" (sound: ^SOUND, result: RESULT) -> RESULT
SOUND_PCMREAD_CALLBACK :: #type proc "cdecl" (sound: ^SOUND, data: rawptr, datalen: u32) -> RESULT

SOUND_PCMSETPOS_CALLBACK :: #type proc "cdecl" (
    sound: ^SOUND,
    subsound: i32,
    position: u32,
    postype: TIMEUNIT,
) -> RESULT

FILE_OPEN_CALLBACK :: #type proc "cdecl" (
    name: cstring,
    filesize: ^u32,
    handle: ^rawptr,
    userdata: rawptr,
) -> RESULT

FILE_CLOSE_CALLBACK :: #type proc "cdecl" (handle: rawptr, userdata: rawptr) -> RESULT

FILE_READ_CALLBACK :: #type proc "cdecl" (
    handle: rawptr,
    buffer: rawptr,
    sizebytes: u32,
    bytesread: ^u32,
    userdata: rawptr,
) -> RESULT

FILE_SEEK_CALLBACK :: #type proc "cdecl" (handle: rawptr, pos: u32, userdata: rawptr) -> RESULT
FILE_ASYNCREAD_CALLBACK :: #type proc "cdecl" (info: ^ASYNCREADINFO, userdata: rawptr) -> RESULT
FILE_ASYNCCANCEL_CALLBACK :: #type proc "cdecl" (info: ^ASYNCREADINFO, userdata: rawptr) -> RESULT

FILE_ASYNCDONE_FUNC :: #type proc "cdecl" (info: ^ASYNCREADINFO, result: RESULT)
MEMORY_ALLOC_CALLBACK :: #type proc "cdecl" (size: u32, _type: MEMORY_TYPE, sourcestr: cstring)

MEMORY_REALLOC_CALLBACK :: #type proc "cdecl" (
    ptr: rawptr,
    size: u32,
    _type: MEMORY_TYPE,
    sourcestr: cstring,
)

MEMORY_FREE_CALLBACK :: #type proc "cdecl" (ptr: rawptr, _type: MEMORY_TYPE, sourcestr: cstring)
_3D_ROLLOFF_CALLBACK :: #type proc "cdecl" (channelcontrol: ^CHANNELCONTROL, distance: f32) -> f32



///////////////////////////////////////////////////////////////////////////////////////////////////////
// FMOD structs
//

ASYNCREADINFO :: struct {
    handle:    rawptr,
    offset:    u32,
    sizebytes: u32,
    priority:  i32,
    userdata:  rawptr,
    buffer:    rawptr,
    bytesread: u32,
    done:      FILE_ASYNCDONE_FUNC,
}

VECTOR :: [3]f32

_3D_ATTRIBUTES :: struct {
    position: VECTOR,
    velocity: VECTOR,
    forward:  VECTOR,
    up:       VECTOR,
}

GUID :: struct {
    Data1: u32,
    Data2: u16,
    Data3: u16,
    Data4: [8]u8,
}

PLUGINLIST :: struct {
    type:        PLUGINTYPE,
    description: rawptr,
}

ADVANCEDSETTINGS :: struct {
    cbSize:                   i32,
    maxMPEGCodecs:            i32,
    maxADPCMCodecs:           i32,
    maxXMACodecs:             i32,
    maxVorbisCodecs:          i32,
    maxAT9Codecs:             i32,
    maxFADPCMCodecs:          i32,
    maxPCMCodecs:             i32,
    ASIONumChannels:          i32,
    ASIOChannelList:          ^rawptr,
    ASIOSpeakerList:          ^SPEAKER,
    vol0virtualvol:           f32,
    defaultDecodeBufferSize:  u32,
    profilePort:              u16,
    geometryMaxFadeTime:      u32,
    distanceFilterCenterFreq: f32,
    reverb3Dinstance:         i32,
    DSPBufferPoolSize:        i32,
    resamplerMethod:          DSP_RESAMPLER,
    randomSeed:               u32,
    maxConvolutionThreads:    i32,
    maxOpusCodecs:            i32,
}

TAG :: struct {
    type:     TAGTYPE,
    datatype: TAGDATATYPE,
    name:     [^]byte,
    data:     rawptr,
    datalen:  u32,
    updated:  b32,
}

CREATESOUNDEXINFO :: struct {
    cbsize:              i32,
    length:              u32,
    fileoffset:          u32,
    numchannels:         i32,
    defaultfrequency:    i32,
    format:              SOUND_FORMAT,
    decodebuffersize:    u32,
    initialsubsound:     i32,
    numsubsounds:        i32,
    inclusionlist:       ^i32,
    inclusionlistnum:    i32,
    pcmreadcallback:     SOUND_PCMREAD_CALLBACK,
    pcmsetposcallback:   SOUND_PCMSETPOS_CALLBACK,
    nonblockcallback:    SOUND_NONBLOCK_CALLBACK,
    dlsname:             cstring,
    encryptionkey:       cstring,
    maxpolyphony:        i32,
    userdata:            rawptr,
    suggestedsoundtype:  SOUND_TYPE,
    fileuseropen:        FILE_OPEN_CALLBACK,
    fileuserclose:       FILE_CLOSE_CALLBACK,
    fileuserread:        FILE_READ_CALLBACK,
    fileuserseek:        FILE_SEEK_CALLBACK,
    fileuserasyncread:   FILE_ASYNCREAD_CALLBACK,
    fileuserasynccancel: FILE_ASYNCCANCEL_CALLBACK,
    fileuserdata:        rawptr,
    filebuffersize:      i32,
    channelorder:        CHANNELORDER,
    initialsoundgroup:   ^SOUNDGROUP,
    initialseekposition: u32,
    initialseekpostype:  TIMEUNIT,
    ignoresetfilesystem: i32,
    audioqueuepolicy:    u32,
    minmidigranularity:  u32,
    nonblockthreadid:    i32,
    fsbguid:             ^GUID,
}

REVERB_PROPERTIES :: struct {
    DecayTime:         f32,
    EarlyDelay:        f32,
    LateDelay:         f32,
    HFReference:       f32,
    HFDecayRatio:      f32,
    Diffusion:         f32,
    Density:           f32,
    LowShelfFrequency: f32,
    LowShelfGain:      f32,
    HighCut:           f32,
    EarlyLateMix:      f32,
    WetLevel:          f32,
}

ERRORCALLBACK_INFO :: struct {
    result:         RESULT,
    instancetype:   ERRORCALLBACK_INSTANCETYPE,
    instance:       rawptr,
    functionname:   cstring,
    functionparams: cstring,
}

CPU_USAGE :: struct {
    dsp:          f32,
    stream:       f32,
    geometry:     f32,
    update:       f32,
    convolution1: f32,
    convolution2: f32,
}

DSP_DATA_PARAMETER_INFO :: struct {
    data:   rawptr,
    length: u32,
    index:  i32,
}
